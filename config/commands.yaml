# config/commands.yaml
# This file defines all user-facing slash commands for the Telegram chatbot.
# Each command includes a usage string and a description.
# These are parsed at runtime to power help messages and routing behavior.
# config/commands.yaml
# Defines all slash commands: usage, description, and (optionally) args.

# ── Help & Status ────────────────────────────────────────────────────────────
help:
  usage: /help
  description: Show this help message with available commands
  args: []

status:
  usage: /status
  description: Check whether the current bot, service, model, etc. are usable
  args: []



# ── Bots & Services ──────────────────────────────────────────────────────────
bots:
  usage: /bots
  description: Lists (enabled) configured bots
  args: []

bot:
  usage: /bot [pause|resume]
  description: >
    Manage Bot
      • no args: show current bot's settings.
      • pause: pause routing messages to LLM.
      • resume: resume routing messages.
  args:
    - name: action
      type: str
      choices: [start, stop]
      optional: true
    - name: index
      type: int
      optional: true

service:
  usage: /service [<name>|<index>]
  description: >
    Manage service
    • no args: Show current and available services
    • <name>|index>: Switch to that service
  args:
    - name: name_or_index
      type: str
      optional: true
      description: Name or index of the service to switch to

# ── Models ───────────────────────────────────────────────────────────────────
models:
  usage: /models
  description: List all models for the current service
  args: []

model:
  usage: /model [<name|index>]
  description: Show info about or switch to a specific model
  args:
    - name: model
      type: str
      optional: true

tokens:
  usage: /tokens <int>
  description: Set or view max tokens (positive integer only)
  args:
    - name: tokens
      type: int

temperature:
  usage: /temp <float>
  description: Set model temperature (0.0–2.0, controls creativity)
  args:
    - name: temperature
      type: float

# ── Save & Export ────────────────────────────────────────────────────────────
savestring:
  usage: /sstr [<filename>] <text>
  description: Save an arbitrary string locally
    • If `<filename>` (.txt, .log, .md) is provided, write into that file
    • Otherwise auto‐generate `<timestamp>_savestring.txt`
  args:
    - name: filename
      type: str
      optional: true
      description: Destination filename
    - name: text
      type: str
      optional: false
      description: The text to save

savelastprompt:
  usage: /slp [<filename>]
  description: Save the last user prompt to file (timestamped if no name)
  args:
    - name: filename
      type: str
      optional: true

savelastresponse:
  usage: /slr [--ask|<filename>]
  description: >
    • Save the last model response.
    • If “--ask”, prompt for a filename;
    • else use provided name (or timestamp).
  args:
    - name: ask
      flag: --ask
      type: bool
      optional: true
    - name: filename
      type: str
      optional: true

# ── User(s) & char(s)─────────────────────────────────────────────────────────
users:
  usage: /users
  description: list available users
  args: []

user:
  usage: /user <list|<int>||show|update> [<value>]
  description: >
    Manage characters & scenarios:
      • show:   show current user's name & role
      • list:   list available users (= /users)
      • <int>:  switch to that user
      • drop:   drop user config

chars:
  usage: /chars
  description: list available chars
  args: []

char:
  usage: /char <list|<int>||show|update> [<value>]
  description: >
    Manage characters & scenarios:
      • show:   show current char's name & role
      • list:   list available chars (= /chars)
      • <int>:  switch to that char
      • drop:   drop char config (=blank LLM)

# TO DO: not implemented yet; might be obsolete anyway
memory:
  usage: /memory <show|update> [<value>]
  description: >
    Manage session memory:
      • show:    display all memory buckets
      • update:  add or replace a memory entry
  args:
    - name: action
      type: str
      choices: [show, update]
    - name: value
      type: str
      optional: true

# ── History ──────────────────────────────────────────────────────────────────
history:
  usage: /h <on|off|files|load|flush>
  description: >
    Manage chat history (per char+user):
      • on:     enable logging
      • off:    disable logging & flush
      • files:  list saved history files
      • load:   load saved history into context
      • flush:  manually flush history to disk
  args:
    - name: action
      type: str
      choices: [on, off, files, load, flush]
    - name: arg
      type: str
      optional: true

# ── Jailbreaks ───────────────────────────────────────────────────────────────
# TO DO
jailbreak:
  usage: /jb <on|off|list> [arg]
  description: >
    not implemented yet (show info for jailbreak ig /jb, switch to a jailbreak if, for example, /jb 1 to that (index jb)

jailbreaks:
  usage: /jbs
  description: >
    same as /jb list

# ── Save & restore settings───────────────────────────────────────────────────  
# TO DO
setdefaults:
  usage: /setdefaults
  description: Save current config (service, model, etc.) as bot’s default
  args: []

# TO DO
defaults:
  usage: /defaults [global]
  description: Reset to bot defaults or use global defaults when “global” is provided
  args:
    - name: scope
      type: str
      choices: [global]
      optional: true

# TO DO
undo:
  usage: /undo
  description: Undo the last configuration change (e.g. model/service)
  args: []
